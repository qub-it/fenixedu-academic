package org.fenixedu.academic.domain.person.personIdentifier;

import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.fenixedu.academic.domain.exceptions.DomainException;
import org.fenixedu.academic.util.Bundle;
import org.fenixedu.bennu.core.domain.Bennu;
import org.fenixedu.bennu.core.i18n.BundleUtil;
import org.fenixedu.commons.i18n.LocalizedString;

import com.qubit.terra.framework.services.accessControl.Profile;
import com.qubit.terra.framework.services.accessControl.ProfileBuilder;
import com.qubit.terra.framework.services.accessControl.ProfileBuilder.ObjectProviderStrategy;
import com.qubit.terra.qubAccessControl.domain.AccessControlProfile;

public class PersonIdentifierType extends PersonIdentifierType_Base {

    protected PersonIdentifierType() {
        super();
        setRootDomainObject(Bennu.getInstance());
    }

    public static PersonIdentifierType create(String code, LocalizedString name) {
        PersonIdentifierType type = new PersonIdentifierType();

        type.setCode(code);
        type.setName(name);
        type.initAccessControlProfiles();

        return type;
    }

    @Override
    public void setCode(String code) {
        Optional<PersonIdentifierType> findByCode = findByCode(code);
        if (findByCode.isPresent() && findByCode.get() != this) {
            throw new DomainException("error.person.personIdentifer.type.code");
        }
        
        super.setCode(code);
        getCreationAccessControlProfile().ifPresent(p -> {
            if (p instanceof AccessControlProfile) {
                ((AccessControlProfile) p).setCode(getIdentifierProfileCode());
            }
        });
    }

    @Override
    public void setName(LocalizedString name) {
        super.setName(name);
        getCreationAccessControlProfile().ifPresent(p -> {
            if (p instanceof AccessControlProfile) {
                ((AccessControlProfile) p).setName(getIdentifierProfileName());
            }
        });
    }

    public Optional<Profile> getCreationAccessControlProfile() {
        return Profile.findProfileByCode(getIdentifierProfileCode());
    }

    private void initAccessControlProfiles() {
        final com.qubit.terra.framework.tools.primitives.LocalizedString profileName =
                getName() != null ? getIdentifierProfileName() : new com.qubit.terra.framework.tools.primitives.LocalizedString(
                        getIdentifierProfileCode());

        ProfileBuilder profileBuilder = Profile.builder().code(getIdentifierProfileCode()).name(profileName).autoGenerated(true)
                .provide(PersonIdentifierType.class, ObjectProviderStrategy.READ_ASSOCIATED);

        profileBuilder.build().addObject(this);
    }

    private com.qubit.terra.framework.tools.primitives.LocalizedString getIdentifierProfileName() {
        com.qubit.terra.framework.tools.primitives.LocalizedString name =
                new com.qubit.terra.framework.tools.primitives.LocalizedString();

        getName().getLocales().forEach(l -> name.setValue(l,
                BundleUtil.getString(Bundle.APPLICATION, l, "profileName.identifierType", getName().getContent(l))));
        return name;
    }

    private String getIdentifierProfileCode() {
        return "PersonIdentifiersProfile_" + getCode();
    }

    public static Optional<PersonIdentifierType> findByCode(String code) {
        return Bennu.getInstance().getPersonIdentifierTypesSet().stream().filter(type -> StringUtils.equals(type.getCode(), code))
                .findAny();
    }

    public void delete() {
        if (!getIdentifiersSet().isEmpty()) {
            throw new DomainException("error.person.personIdentifier.type.existingIdentifiers");
        }

        getCreationAccessControlProfile().ifPresent(p -> p.delete());
        
        setRootDomainObject(null);
        this.deleteDomainObject();
    }
}
