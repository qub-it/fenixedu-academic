package org.fenixedu.academic.domain.person.personIdentifier;

import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.fenixedu.academic.domain.exceptions.DomainException;
import org.fenixedu.bennu.core.domain.Bennu;
import org.fenixedu.commons.i18n.LocalizedString;

import com.qubit.terra.framework.services.accessControl.Permission;
import com.qubit.terra.framework.services.accessControl.Profile;
import com.qubit.terra.framework.services.accessControl.ProfileBuilder;

public class PersonIdentifierType extends PersonIdentifierType_Base {

    public static final String PERSON_IDENTIFIER = "PERSON_IDENTIFIER";

    protected PersonIdentifierType() {
        super();
        setRootDomainObject(Bennu.getInstance());
    }

    public static PersonIdentifierType create(String code, LocalizedString name) {
        PersonIdentifierType type = new PersonIdentifierType();

        type.setCode(code);
        type.setName(name);
        type.initAccessControlProfiles();

        return type;
    }

    public void edit(final String code, final LocalizedString name, final String expression,
            final LocalizedString expressionHelpMessage) {
        setCode(code);
        setName(name);
        editExpressionAndHelpMessage(expression, expressionHelpMessage);
    }

    @Override
    public void setCode(String code) {
        Optional<PersonIdentifierType> findByCode = findByCode(code);
        if (findByCode.isPresent() && findByCode.get() != this) {
            throw new DomainException("error.person.personIdentifer.type.code");
        }

        super.setCode(code);
    }

    @Override
    public String getExpression() {
        return super.getExpression();
    }

    @Override
    protected void setExpression(final String expression) {
        if (expression != null) {
            try {
                Pattern.compile(expression);
            } catch (PatternSyntaxException e) {
                throw new DomainException("error.person.personIdentifier.type.invalidRegex");
            }
        }
        super.setExpression(expression);
    }

    @Override
    public LocalizedString getExpressionHelpMessage() {
        return super.getExpressionHelpMessage();
    }

    public void editExpressionAndHelpMessage(final String expression, final LocalizedString expressionHelpMessage) {
        boolean expressionEmpty = StringUtils.isBlank(expression);
        boolean helpMessageEmpty = expressionHelpMessage == null || expressionHelpMessage.isEmpty();

        if (expressionEmpty != helpMessageEmpty) {
            throw new DomainException("error.person.personIdentifier.type.expression.filledOrEmpty");
        }
        setExpression(expression);
        setExpressionHelpMessage(expressionHelpMessage);
    }

    private void initAccessControlProfiles() {
        String profileCode = "PersonIdentifiersProfile_" + UUID.randomUUID().toString();
        ProfileBuilder profileBuilder =
                Profile.builder().code(profileCode).permissions(Permission.findPermissionByCode(PERSON_IDENTIFIER).orElse(null))
                        .name(new com.qubit.terra.framework.tools.primitives.LocalizedString()).autoGenerated(true)
                        .associate(PersonIdentifierType.class);

        profileBuilder.build().addObject(this);
    }

    public static Optional<PersonIdentifierType> findByCode(String code) {
        return Bennu.getInstance().getPersonIdentifierTypesSet().stream().filter(type -> StringUtils.equals(type.getCode(), code))
                .findAny();
    }

    public void delete() {
        if (!getIdentifiersSet().isEmpty()) {
            throw new DomainException("error.person.personIdentifier.type.existingIdentifiers");
        }

        getIdentifierAccessControlProfiles().forEach(p -> {
            p.getParents().forEach(pp -> pp.removeChildProfile(p));
            p.delete();
        });
        setRootDomainObject(null);
        this.deleteDomainObject();
    }

    public Set<Profile> getIdentifierAccessControlProfiles() {
        return Permission.findPermissionByCode(PERSON_IDENTIFIER).stream().flatMap(p -> p.findProfilesContaining(this))
                .filter(pp -> pp.isAutoGenerated()).collect(Collectors.toSet());
    }
}
